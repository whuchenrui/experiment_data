# coding=utf-8
__author__ = 'CRay'

import os
import random
from lib import Function
from lib.Config import Config
from lib.Mongo import Mongo
"""
check_pic_info 函数 验证init_db 文件是否正确.  随机取 random_number 张图片, 统计文件中的总的出现次数和点击次数,
再统计mongodb中总的出现次数和点击此处, 查看两者结果是否相同  ---- 已验证正确
"""


def check_pic_info(random_number):
    str_pic = '197527041 196850177 169307649 202538753 170688513 177932801 182428161 212835841 209407745 204205825 214706689 204553729 211788545 196386561 170675457 214011905 207622145 185725441 208763649 210243841 210444033 210747137 207957505 173206785 213307905 190229761 193104897 171358209 206881793 215523585 205202945 201199105 215603969 191766529 214142977 181751041 188125697 209100801 210708481 186520065 209859329 208289281 193782273 202748673 212727041 208311297 175623169 208612865 211126017 211327489 181983233 179341057 187813121 205326593 199076097 214440705 214274817 210979329 206475777 214732289 185527041 202633729 209618689 211166465 200666369 214833153 204839169 175158017 209789441 215783937 208269825 206161921 174278657 212537089 208788225 204054017 214426369 193862401 203181825 200229121 207453697 188764417 175597057 199475457 178886913 177277185 208713985 215192065 215784193 189293569 215895297 209502465 207194625 170940161 193620993 213532417 215925249 200204289 205732609 206236673 206545921 177959169 170391553 180745217 194121729 216031233 187628545 209457921 212970497 187008513 205189121 204934401 197919233 189073409 209239553 202015489 188410881 203777025 200021505 184615681 205920769 178274305 193947905 200229377 208807425 204143617 199070465 214663425 210651905 178637313 210027521 215450625 205592577 212940545 170798337 203943937 184085761 182784769 209170689 178831105 195121153 210738177 178643457 204138241 194606593 185155073 216038145 204730881 211654145 208805889 187714817 175150337 208549889 188665345 213055745 203551489 211592705 186966529 173075713 215181313 202747905 199952897 189408769 181437441 209678849 172144129 174901505 175053057 175577857 201722113 208739841 181532929 209652225 175000065 202756865 202661121 187078913 215435521 186097665 203540737 187592705 199155457 173236225 194833921 205630977 204995073 214218497 188132865 184352001 210410753 173387265 203648001 201346305 207839233 207394817 190121217 189686529 202668033 181878785 174046465 177633537 178672385 195630593 186370817 181519105 214298113 194764801 172657665 183672065 213577985 179901185 210092289 208679425 178843905 174277633 177282817 189972737 171021825 183393537 208600833 212883201 192785921 209618177 182876929 215339009 171900161 204891649 202568193 179253761 190235649 210234113 197861889 187781377 202199553 173247745 209736449 208772865 198964481 178134273 206478337 203645953 211165441 194953473 204486401 193125377 202082817 198943489 192710913 207714049 192530177 171751937 195489793 213115393 188101889 195768065 198128641 184427265 189868289 199888385 197713153 194216193 184646401 172246529 207778561 175603713 178387713 192675585 198859009 184976641 192704769 209923841 180227329 197135361 190587649 201853697 204339201 204552193 208868865 205424129 183856385 175333633 200901121 204067329 193540353 172529153 205302273 182146049 176279041 201914113 187205377 207936001 205519617 202055425 187021057 201612801 209710081 211150849 178468097 204935169 189964289 209219585 203749121 213003265 175523585 172657153 192377345 205426689 206051073 171140097 198384385 184257537 214959361 186596097 212151809 205601793 200412673 199226625 210645505 186173953 196251137 204208385 198212353 184572417 182971905 209527809 173465345 200628993 209422337 67783681 206845441 181028097 200671489 199790081 207805697 212732417 205889537 203145985 213715969 181955585 210722817 175601409 175216129 171403777 203735553 207956737 171098881 177841665 205183489 168609537 193643521 173684993 193317121 204113665 172000769 199941121 213927169 203932417 191957761 203851009 187266561 199079681 212689409 180775937 207479041 188472065 207668225 186130945 205915905 212568321 181888257 200217857 204106497 212614913 192274689 215193089 194830081 215457281 211421953 181885697 169379073 190236673 204065025 200225025 205492481 200749825 202629633 190964225 204996609 212483585 213862145 205876481 181498881 205777665 205915649 198552321 189969409 212724737 206286849 186893569 209315585 179950337 194948353 201123329 199812609 209227521 173998081 204340993 207058433 174661889 202850049 204044289 184683265 214615041 176474625 177023745 210622721 200493057 210856449 209644033 187065601 191379713 197689601 176793089 204053505 206313985 192669953 212480001 211174145 199007489 192608257 173867521 171339265 206557441 204728321 209442817 193135873 189960193 187291905 178274817 210712833 210639105 189111297 191942401 187475201 203026433 195970049 181888001 211237121 190508801 208119041 190825985 198075393 203735297 180745473 190447873 200061441 208529409 169531137 203305729 207370241 205424897 205189889 189741057 210743041 170919425 205840385 205603841 200981505 198593537 213958913 169309441 193891841 186752257 193892609 187699969 202201601 204018177 190360321 203957761 208784897 205733377 205425409 209210625 192709121 201198337 170069249 203027201 203646721 195597825 172328193 184493825 182272513 174164737 192759809 214009601 198318337 204115713 201954305 210756353 208796673 170219009 173443841 209505793 192376321 204731137 194499585 191666945 169351425 209379329 204486913 181393153 211377409 191767809 199684097 194491649 169311745 211424769 198640129 178276097 197444609 209424641 214196993 213983489 214011137 205728001 189389569 184243457 193984257 212098561 184994561 173236993 200446465 179312385 205728257 173303041 176171009 196543745 172039681 213793025 198550785 210169601 215025665 211439873 181516033 200689921 199961857 213717761 204733697 182245121 174135041 209171713 214657281 207742465 181792257 206326273 211166209 199238401 215495425 215894273 213496577 187684353 202212097 187663105 203263489 179849473 184833537 209895169 200193793 203943169 207122945 207053313 207377153 211024129 183643905 189710849 179088641 179092737 215559937 171033089 204151041 179952641 170220033 206644481 205005057 190533633 203273217 214822913 200256001 188034305 189415937 215558913 205322497 194461441 174089729 195262721 200254465 186843905 203079425 186581761 197744129 188500737 206826753 174026497 169319425 173207041 209326849 205417217 191591425 204059905 189897217 201300737 186430465'

    list_pic = str_pic.strip(' ').split(' ')
    set_random = set()  # 共计20个随机取出的图片
    dict_check_result = {}   # 统计整个图片的出现和点击, 不按照页码来计算
    for i in range(0, random_number):
        random_pic = random.choice(list_pic)
        set_random.add(random_pic)
    for pic in set_random:
        if pic not in dict_check_result:
            dict_check_result[pic] = [0, 0]

    cf_data = Config('data.conf')
    filter_data = cf_data.get('path', 'filter_data')
    list_time = Function.get_time_list('2014-11-04', '2014-11-08')
    for day in list_time:
        input_path = filter_data + day
        if os.path.exists(input_path):
            for i in range(0, 24):
                temp_name = ''
                if i < 10:
                    temp_name = '0'
                file_in_pic = input_path + '\\pic_' + temp_name + str(i)
                file_in_result = input_path + '\\result_' + temp_name + str(i)
                if os.path.exists(file_in_result):
                    fin_pic = open(file_in_pic, 'r')
                    fin_result = open(file_in_result, 'r')
                    while True:
                        line_pic = fin_pic.readline()
                        line_result = fin_result.readline()
                        if not line_result:
                            break
                        list_pic = line_pic.strip('\n').strip(' ').split(' ')
                        list_result = line_result.strip('\n').strip(' ').split(' ')
                        length = len(list_result)
                        for j in range(0, length):
                            pic = list_pic[j]
                            if pic in dict_check_result:
                                dict_check_result[pic][0] += 1
                                if int(list_result[j]) > 0:
                                    dict_check_result[pic][1] += 1
                    fin_pic.close()
                    fin_result.close()
        print 'finish: ', day

    dict_mongo = {}
    mongo = Mongo('kdd', 'pic_click_info')
    for pic in dict_check_result:
        if pic not in dict_mongo:
            dict_mongo[pic] = [0, 0]
        record = mongo.collection.find({'pid': pic}, {'_id': 0})
        if record.count() > 0:
            record = record[0]
            for day in list_time:
                if day in record:
                    for page in record[day]:
                        dict_mongo[pic][0] += record[day][str(page)][0]
                        dict_mongo[pic][1] += record[day][str(page)][1]
        else:
            print 'miss', pic
    mongo.close()

    # 比较
    valid = 0
    for pic in dict_check_result:
        if dict_mongo[pic][0] == dict_check_result[pic][0] and dict_mongo[pic][1] == dict_check_result[pic][1]:
            valid += 1
        else:
            print 'pic not valid: ', pic
    print '========= valid: ', str(valid)

    print dict_check_result
    print dict_mongo


def check_similarity():
    pass


if __name__ == '__main__':
    check_pic_info(40)
